name: Build Container Images

on:
  push:
    tags:
      - "image/v*"
    paths-ignore:
      - "charts/**"
  pull_request:
    branches: [master]
    paths-ignore:
      - "charts/**"
env:
  IMAGES: docker.io/hapiproject/hapi
  PLATFORMS: linux/amd64,linux/arm64/v8

jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04
    steps:
      - name: Container meta for default (distroless) image
        id: docker_meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.IMAGES }}
          tags: |
            type=match,pattern=image-(.*),group=1,enable=${{github.event_name != 'pull_request'}}

      - name: Container meta for tomcat image
        id: docker_tomcat_meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.IMAGES }}
          tags: |
            type=match,pattern=image-(.*),group=1,enable=${{github.event_name != 'pull_request'}}
          flavor: |
            suffix=-tomcat,onlatest=true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        if: github.event_name != 'pull_request'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push default (distroless) image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          platforms: ${{ env.PLATFORMS }}
          target: default
          outputs: type=docker,dest=/tmp/hapi-fhir-jpaserver-image.tar

      - name: Upload the built default image as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: hapi-fhir-jpaserver-image
          path: /tmp/hapi-fhir-jpaserver-image.tar

      - name: Build and push tomcat image
        id: docker_build_tomcat
        uses: docker/build-push-action@v2
        with:
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_tomcat_meta.outputs.tags }}
          labels: ${{ steps.docker_tomcat_meta.outputs.labels }}
          platforms: ${{ env.PLATFORMS }}
          target: tomcat

  e2e-tests:
    needs: build
    strategy:
      matrix:
        database: [h2, postgres]
    runs-on: ubuntu-20.04
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: hapi-fhir-jpaserver-image
          path: /tmp

      - name: Load image
        run: |
          docker load --input /tmp/hapi-fhir-jpaserver-image.tar
          docker image ls -a

      - name: Run E2E tests using ${{ matrix.database }}
        env:
          HAPI_FHIR_SERVER_IMAGE_TAG: "${{ needs.docker_meta.outputs.tags }}"
        run: |
          docker compose -f tests/docker-compose.yaml -f tests/docker-compose.postgres.yaml run test

      - name: Print E2E logs
        if: always()
        run: |
          docker compose -f tests/docker-compose.yaml -f tests/docker-compose.postgres.yaml logs
          docker compose -f tests/docker-compose.yaml -f tests/docker-compose.postgres.yaml down --volumes --remove-orphans
